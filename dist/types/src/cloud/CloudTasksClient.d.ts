import type { ApplyOptions, ApplyOutcome, CreatedTask, ListTasksOptions, TaskSummary, TaskText, TurnAttempt } from '../types/cloud-tasks';
import type { EnvironmentInfo } from '../types/cloud-tasks';
/**
 * Configuration options for CloudTasksClient.
 */
export interface CloudTasksClientOptions {
    /**
     * Base URL of the Codex cloud tasks API.
     * - If omitted, defaults to process.env.CODEX_CLOUD_TASKS_BASE_URL or
     *   'https://chatgpt.com/backend-api' (matching codex-rs 0.45.0+ behavior).
     */
    baseUrl?: string;
    /** Bearer token for API authentication (mutually exclusive with chatGptAccountId) */
    bearerToken?: string;
    /** ChatGPT account ID for authentication (mutually exclusive with bearerToken) */
    chatGptAccountId?: string;
    /** Custom user agent string for API requests */
    userAgent?: string;
    /** Use mock backend for testing (default: false) */
    mock?: boolean;
    /** Optional override for CLI-managed auth location */
    codexHome?: string;
}
/**
 * Client for managing remote Codex cloud tasks.
 *
 * Cloud tasks enable remote code generation where prompts are sent to a cloud backend,
 * executed remotely, and results (diffs, messages) are retrieved and applied locally.
 *
 * @example
 * ```typescript
 * const client = new CloudTasksClient({
 *   // baseUrl optional; defaults to https://chatgpt.com/backend-api
 *   // baseUrl: 'https://chatgpt.com/backend-api',
 *   bearerToken: process.env.OPENAI_API_KEY,
 * });
 *
 * const tasks = await client.listTasks();
 * const created = await client.createTask({
 *   environmentId: 'prod',
 *   prompt: 'Fix the authentication bug',
 *   gitRef: 'main',
 * });
 *
 * client.close();
 * ```
 */
export declare class CloudTasksClient {
    private readonly options;
    private readonly native;
    private readonly nativeConfig;
    private readonly resolvedConfig;
    private closed;
    constructor(options: CloudTasksClientOptions);
    private normalizeConfig;
    /**
     * List all cloud tasks, optionally filtered by environment.
     *
     * @param options - Filtering and pagination options
     * @returns Array of task summaries
     * @throws {CloudTasksError} If the API request fails
     *
     * @example
     * ```typescript
     * // List all tasks
     * const tasks = await client.listTasks();
     *
     * // Filter by environment and limit results
     * const prodTasks = await client.listTasks({
     *   environmentId: 'prod',
     *   limit: 10,
     * });
     * ```
     *
     * @remarks
     * **Caveat (current backend):**
     * Listing by environment is not reliable right now; use the returned task ID to track.
     * `listTasks({ environmentId })` may not filter server-side yet, and the list payload
     * often lacks `environmentId`. Use `getTaskText(id)` or `getTaskMessages(id)` to track
     * specific tasks instead of relying on environment filtering.
     */
    listTasks(options?: ListTasksOptions): Promise<TaskSummary[]>;
    /**
     * List available environments (id + label) using the same method as the Codex TUI.
     * Returns a de-duplicated list with pinned environments first.
     */
    listEnvironments(): Promise<EnvironmentInfo[]>;
    /**
     * Resolve a human label or hex id to the backend environment id.
     * - If `value` is a 32-hex id, returns it.
     * - Otherwise, searches `listEnvironments()` by case-insensitive label.
     */
    resolveEnvironmentId(value: string): Promise<string>;
    /**
     * Create a new cloud task by submitting a prompt for remote execution.
     *
     * @param options - Task creation parameters
     * @param options.environmentId - Target environment ID (e.g., 'prod', 'staging')
     * @param options.prompt - User prompt describing the task to execute
     * @param options.gitRef - Git branch or ref to base the task on (e.g., 'main')
     * @param options.qaMode - Enable QA mode for enhanced validation (default: false)
     * @param options.bestOfN - Generate N attempts and select the best (default: 1)
     * @returns Created task with assigned ID
     * @throws {CloudTasksError} If validation fails or API request fails
     *
     * @example
     * ```typescript
     * const task = await client.createTask({
     *   environmentId: 'prod',
     *   prompt: 'Add error handling to the API endpoints',
     *   gitRef: 'main',
     *   bestOfN: 3, // Generate 3 attempts
     * });
     * console.log('Task created:', task.id);
     * ```
     */
    createTask(options: {
        environmentId: string;
        prompt: string;
        gitRef: string;
        qaMode?: boolean;
        bestOfN?: number;
    }): Promise<CreatedTask>;
    /**
     * Retrieve the unified diff (patch) generated by a task.
     *
     * @param taskId - Unique task identifier
     * @returns Unified diff string, or null if no diff is available
     * @throws {CloudTasksError} If the task is not found or API request fails
     *
     * @example
     * ```typescript
     * const diff = await client.getTaskDiff('task-123');
     * if (diff) {
     *   console.log('Generated changes:', diff);
     * }
     * ```
     */
    getTaskDiff(taskId: string): Promise<string | null>;
    /**
     * Retrieve assistant output messages from a task (without diff content).
     *
     * @param taskId - Unique task identifier
     * @returns Array of assistant messages
     * @throws {CloudTasksError} If the task is not found or API request fails
     *
     * @example
     * ```typescript
     * const messages = await client.getTaskMessages('task-123');
     * messages.forEach(msg => console.log('Assistant:', msg));
     * ```
     */
    getTaskMessages(taskId: string): Promise<string[]>;
    /**
     * Retrieve complete task text including prompt, messages, and metadata.
     *
     * This method provides comprehensive task information including the original prompt,
     * assistant messages, turn IDs for best-of-N workflows, and attempt status.
     *
     * @param taskId - Unique task identifier
     * @returns Task text with prompt, messages, and metadata
     * @throws {CloudTasksError} If the task is not found or API request fails
     *
     * @example
     * ```typescript
     * const text = await client.getTaskText('task-123');
     * console.log('Original prompt:', text.prompt);
     * console.log('Attempt:', text.attemptPlacement + 1);
     * console.log('Status:', text.attemptStatus);
     * ```
     */
    getTaskText(taskId: string): Promise<TaskText>;
    /**
     * Perform a dry-run application of a task's diff to validate it applies cleanly.
     *
     * This method never modifies the working tree. It validates whether the patch
     * would apply successfully and reports any conflicts or skipped files.
     *
     * @param taskId - Unique task identifier
     * @param options - Apply options (diffOverride to test alternate attempts)
     * @returns Outcome with status, message, and lists of conflicts/skipped files
     * @throws {CloudTasksError} If the task is not found or API request fails
     *
     * @example
     * ```typescript
     * const preflight = await client.applyTaskPreflight('task-123');
     * if (preflight.status === 'success') {
     *   console.log('Patch will apply cleanly');
     * } else {
     *   console.warn('Conflicts:', preflight.conflictPaths);
     * }
     * ```
     */
    applyTaskPreflight(taskId: string, options?: ApplyOptions): Promise<ApplyOutcome>;
    /**
     * Apply a task's diff to the local working tree.
     *
     * This method modifies local files by applying the generated patch. Always run
     * `applyTaskPreflight()` first to check for conflicts.
     *
     * @param taskId - Unique task identifier
     * @param options - Apply options (diffOverride to apply alternate attempts)
     * @returns Outcome with status, message, and lists of conflicts/skipped files
     * @throws {CloudTasksError} If the task is not found or API request fails
     *
     * @example
     * ```typescript
     * // Check first
     * const preflight = await client.applyTaskPreflight('task-123');
     * if (preflight.status === 'success') {
     *   // Apply for real
     *   const result = await client.applyTask('task-123');
     *   console.log(result.message);
     * }
     * ```
     */
    applyTask(taskId: string, options?: ApplyOptions): Promise<ApplyOutcome>;
    /**
     * List all sibling attempts for a task (best-of-N feature).
     *
     * When a task is created with `bestOfN > 1`, multiple attempts are generated.
     * This method retrieves all attempts for review and comparison.
     *
     * @param taskId - Unique task identifier
     * @param turnId - Turn ID from the task text (identifies the generation attempt)
     * @returns Array of turn attempts with diffs and messages
     * @throws {CloudTasksError} If the task is not found or API request fails
     *
     * @example
     * ```typescript
     * const text = await client.getTaskText('task-123');
     * if (text.turnId) {
     *   const attempts = await client.listSiblingAttempts('task-123', text.turnId);
     *   console.log(`Found ${attempts.length} attempts`);
     *   attempts.forEach((a, i) => {
     *     console.log(`Attempt ${i + 1}:`, a.status);
     *   });
     * }
     * ```
     */
    listSiblingAttempts(taskId: string, turnId: string): Promise<TurnAttempt[]>;
    /**
     * Close the client and release resources.
     *
     * This method is idempotent and safe to call multiple times.
     *
     * @example
     * ```typescript
     * const client = new CloudTasksClient({ ... });
     * try {
     *   await client.listTasks();
     * } finally {
     *   client.close();
     * }
     * ```
     */
    close(): void;
    private tryListEnvironmentsNative;
    private isUnimplementedError;
}
