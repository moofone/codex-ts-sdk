/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import type { ApplyPatchApprovalRequestEventMessage, CodexEvent, ConversationPathEventMessage, EnteredReviewModeEventMessage, ExecApprovalRequestEventMessage, ExitedReviewModeEventMessage, GetHistoryEntryResponseEventMessage, ListCustomPromptsResponseEventMessage, McpListToolsResponseEventMessage, NotificationEventMessage, SessionConfiguredEventMessage, SessionCreatedEventMessage, ShutdownCompleteEventMessage, TaskCompleteEventMessage, TaskStartedEventMessage, TokenCountEventMessage, TurnCompletedEventMessage, TurnContextEventMessage, TurnStartedEventMessage } from '../types/events';
import type { CodexClientConfig, CreateConversationOptions, GetHistoryEntryRequestOptions, GetStatusOptions, OverrideTurnContextOptions, ReviewRequestInput, SendMessageOptions, SendUserTurnOptions, StatusResponse } from '../types/options';
import type { PartialCodexLogger } from '../utils/logger';
import type { CodexPlugin } from '../plugins/types';
declare const EVENT_STREAM_CLOSED = "eventStreamClosed";
export declare class CodexClient extends EventEmitter {
    private readonly config;
    private native?;
    private session?;
    private requestCounter;
    private eventLoop?;
    private abortEventLoop;
    protected readonly logger: PartialCodexLogger;
    private readonly plugins;
    private pluginsInitialized;
    private readonly statusStore;
    private readonly skipVersionCheck;
    constructor(config?: CodexClientConfig);
    registerPlugin(plugin: CodexPlugin): void;
    private warnOnVersionMismatch;
    connect(): Promise<void>;
    createConversation(options?: CreateConversationOptions): Promise<string>;
    sendMessage(text: string, options?: SendMessageOptions): Promise<void>;
    sendUserTurn(text: string, options?: SendUserTurnOptions): Promise<void>;
    interruptConversation(): Promise<void>;
    respondToExecApproval(requestId: string, decision: 'approve' | 'reject'): Promise<void>;
    respondToPatchApproval(requestId: string, decision: 'approve' | 'reject'): Promise<void>;
    overrideTurnContext(options: OverrideTurnContextOptions): Promise<void>;
    addToHistory(text: string): Promise<void>;
    getHistoryEntry(options: GetHistoryEntryRequestOptions): Promise<void>;
    listMcpTools(): Promise<void>;
    listCustomPrompts(): Promise<void>;
    compact(): Promise<void>;
    review(request: ReviewRequestInput): Promise<void>;
    getPath(): Promise<void>;
    getStatus(options?: GetStatusOptions): Promise<StatusResponse>;
    shutdown(): Promise<void>;
    close(): Promise<void>;
    events(signal?: AbortSignal): AsyncIterable<CodexEvent>;
    testModelAvailability(model: string): Promise<boolean>;
    private normalizeGetHistoryEntryOptions;
    private normalizeReviewRequest;
    private submit;
    private applyBeforeSubmit;
    private dispatchAfterEvent;
    private isGetHistoryEntryResponseEventMessage;
    private isMcpListToolsResponseEventMessage;
    private isListCustomPromptsResponseEventMessage;
    private isEnteredReviewModeEventMessage;
    private dispatchOnError;
    private startEventLoop;
    private routeEvent;
    private closeSession;
    on(event: 'sessionConfigured', listener: CodexClientEventListener<SessionConfiguredEventMessage>): this;
    on(event: 'sessionCreated', listener: CodexClientEventListener<SessionCreatedEventMessage>): this;
    on(event: 'turnStarted', listener: CodexClientEventListener<TurnStartedEventMessage>): this;
    on(event: 'turnCompleted', listener: CodexClientEventListener<TurnCompletedEventMessage>): this;
    on(event: 'tokenCount', listener: CodexClientEventListener<TokenCountEventMessage>): this;
    on(event: 'taskStarted', listener: CodexClientEventListener<TaskStartedEventMessage>): this;
    on(event: 'taskComplete', listener: CodexClientEventListener<TaskCompleteEventMessage>): this;
    on(event: 'execCommandApproval', listener: CodexClientEventListener<ExecApprovalRequestEventMessage>): this;
    on(event: 'applyPatchApproval', listener: CodexClientEventListener<ApplyPatchApprovalRequestEventMessage>): this;
    on(event: 'notification', listener: CodexClientEventListener<NotificationEventMessage>): this;
    on(event: 'conversationPath', listener: CodexClientEventListener<ConversationPathEventMessage>): this;
    on(event: 'shutdownComplete', listener: CodexClientEventListener<ShutdownCompleteEventMessage>): this;
    on(event: 'turnContext', listener: CodexClientEventListener<TurnContextEventMessage>): this;
    on(event: 'historyEntry', listener: CodexClientEventListener<GetHistoryEntryResponseEventMessage>): this;
    on(event: 'mcpTools', listener: CodexClientEventListener<McpListToolsResponseEventMessage>): this;
    on(event: 'customPrompts', listener: CodexClientEventListener<ListCustomPromptsResponseEventMessage>): this;
    on(event: 'enteredReviewMode', listener: CodexClientEventListener<EnteredReviewModeEventMessage>): this;
    on(event: 'exitedReviewMode', listener: CodexClientEventListener<ExitedReviewModeEventMessage>): this;
    on(event: 'event', listener: CodexClientEventListener<CodexEvent>): this;
    on(event: 'error', listener: (error: unknown) => void): this;
    on(event: typeof EVENT_STREAM_CLOSED, listener: () => void): this;
    once(event: 'sessionConfigured', listener: CodexClientEventListener<SessionConfiguredEventMessage>): this;
    once(event: 'sessionCreated', listener: CodexClientEventListener<SessionCreatedEventMessage>): this;
    once(event: 'turnStarted', listener: CodexClientEventListener<TurnStartedEventMessage>): this;
    once(event: 'turnCompleted', listener: CodexClientEventListener<TurnCompletedEventMessage>): this;
    once(event: 'tokenCount', listener: CodexClientEventListener<TokenCountEventMessage>): this;
    once(event: 'taskStarted', listener: CodexClientEventListener<TaskStartedEventMessage>): this;
    once(event: 'taskComplete', listener: CodexClientEventListener<TaskCompleteEventMessage>): this;
    once(event: 'execCommandApproval', listener: CodexClientEventListener<ExecApprovalRequestEventMessage>): this;
    once(event: 'applyPatchApproval', listener: CodexClientEventListener<ApplyPatchApprovalRequestEventMessage>): this;
    once(event: 'notification', listener: CodexClientEventListener<NotificationEventMessage>): this;
    once(event: 'conversationPath', listener: CodexClientEventListener<ConversationPathEventMessage>): this;
    once(event: 'shutdownComplete', listener: CodexClientEventListener<ShutdownCompleteEventMessage>): this;
    once(event: 'turnContext', listener: CodexClientEventListener<TurnContextEventMessage>): this;
    once(event: 'historyEntry', listener: CodexClientEventListener<GetHistoryEntryResponseEventMessage>): this;
    once(event: 'mcpTools', listener: CodexClientEventListener<McpListToolsResponseEventMessage>): this;
    once(event: 'customPrompts', listener: CodexClientEventListener<ListCustomPromptsResponseEventMessage>): this;
    once(event: 'enteredReviewMode', listener: CodexClientEventListener<EnteredReviewModeEventMessage>): this;
    once(event: 'exitedReviewMode', listener: CodexClientEventListener<ExitedReviewModeEventMessage>): this;
    once(event: 'event', listener: CodexClientEventListener<CodexEvent>): this;
    once(event: 'error', listener: (error: unknown) => void): this;
    once(event: typeof EVENT_STREAM_CLOSED, listener: () => void): this;
    off(event: 'sessionConfigured', listener: CodexClientEventListener<SessionConfiguredEventMessage>): this;
    off(event: 'sessionCreated', listener: CodexClientEventListener<SessionCreatedEventMessage>): this;
    off(event: 'turnStarted', listener: CodexClientEventListener<TurnStartedEventMessage>): this;
    off(event: 'turnCompleted', listener: CodexClientEventListener<TurnCompletedEventMessage>): this;
    off(event: 'tokenCount', listener: CodexClientEventListener<TokenCountEventMessage>): this;
    off(event: 'taskStarted', listener: CodexClientEventListener<TaskStartedEventMessage>): this;
    off(event: 'taskComplete', listener: CodexClientEventListener<TaskCompleteEventMessage>): this;
    off(event: 'execCommandApproval', listener: CodexClientEventListener<ExecApprovalRequestEventMessage>): this;
    off(event: 'applyPatchApproval', listener: CodexClientEventListener<ApplyPatchApprovalRequestEventMessage>): this;
    off(event: 'notification', listener: CodexClientEventListener<NotificationEventMessage>): this;
    off(event: 'conversationPath', listener: CodexClientEventListener<ConversationPathEventMessage>): this;
    off(event: 'shutdownComplete', listener: CodexClientEventListener<ShutdownCompleteEventMessage>): this;
    off(event: 'turnContext', listener: CodexClientEventListener<TurnContextEventMessage>): this;
    off(event: 'historyEntry', listener: CodexClientEventListener<GetHistoryEntryResponseEventMessage>): this;
    off(event: 'mcpTools', listener: CodexClientEventListener<McpListToolsResponseEventMessage>): this;
    off(event: 'customPrompts', listener: CodexClientEventListener<ListCustomPromptsResponseEventMessage>): this;
    off(event: 'enteredReviewMode', listener: CodexClientEventListener<EnteredReviewModeEventMessage>): this;
    off(event: 'exitedReviewMode', listener: CodexClientEventListener<ExitedReviewModeEventMessage>): this;
    off(event: 'event', listener: CodexClientEventListener<CodexEvent>): this;
    off(event: 'error', listener: (error: unknown) => void): this;
    off(event: typeof EVENT_STREAM_CLOSED, listener: () => void): this;
    private requireSession;
    private initializePlugins;
    private generateRequestId;
    private resolveCodexHome;
    private wrapConnectionError;
    private wrapSessionError;
}
type CodexClientEventListener<T> = (event: T) => void;
export type { ApplyPatchApprovalRequestEventMessage, ConversationPathEventMessage, CustomPromptDefinition, EnteredReviewModeEventMessage, ExecApprovalRequestEventMessage, ExitedReviewModeEventMessage, GetHistoryEntryResponseEventMessage, HistoryEntryEvent, ListCustomPromptsResponseEventMessage, McpListToolsResponseEventMessage, McpToolDefinition, NotificationEventMessage, ReviewCodeLocation, ReviewFinding, ReviewLineRange, ReviewOutputEventMessage, SessionConfiguredEventMessage, SessionCreatedEventMessage, ShutdownCompleteEventMessage, TaskCompleteEventMessage, TaskStartedEventMessage, TokenCountEventMessage, TurnCompletedEventMessage, TurnContextEventMessage, TurnStartedEventMessage, TurnUsageSummary, } from '../types/events';
