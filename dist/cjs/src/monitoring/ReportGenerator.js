"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimitReportGenerator = void 0;
/**
 * Generates HTML reports with interactive charts for rate limit analysis
 */
class RateLimitReportGenerator {
    /**
     * Generate a complete HTML report
     */
    generateReport(dataPoints, analysis, options = {}) {
        const { title = 'Rate Limit Analysis Report', theme = 'light', includeRawData = false, chartHeight = 400, } = options;
        const chartData = this.prepareChartData(dataPoints);
        const summarySection = this.generateSummarySection(analysis);
        const chartSection = this.generateChartSection(chartHeight);
        const statisticsSection = this.generateStatisticsSection(analysis);
        const rawDataSection = includeRawData ? this.generateRawDataSection(dataPoints) : '';
        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        ${this.getStyles(theme)}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>${title}</h1>
            <div class="timestamp">Generated on ${new Date().toLocaleString()}</div>
        </header>

        ${summarySection}
        ${chartSection}
        ${statisticsSection}
        ${rawDataSection}

        <footer>
            <p>Generated by Rate Limit Monitoring System</p>
        </footer>
    </div>

    <script>
        ${this.getChartScript(chartData, theme)}
    </script>
</body>
</html>`;
    }
    /**
     * Prepare data for Chart.js visualization
     */
    prepareChartData(dataPoints) {
        const sortedPoints = [...dataPoints].sort((a, b) => a.timestamp - b.timestamp);
        return {
            labels: sortedPoints.map(p => new Date(p.timestamp).toLocaleString()),
            timestamps: sortedPoints.map(p => p.timestamp),
            primary: sortedPoints.map(p => p.rateLimits.primary?.used_percent || 0),
            secondary: sortedPoints.map(p => p.rateLimits.secondary?.used_percent || 0),
            queryLatency: sortedPoints.map(p => p.queryLatency || 0),
        };
    }
    /**
     * Generate summary section HTML
     */
    generateSummarySection(analysis) {
        const statusClass = analysis.summary.status;
        const statusEmoji = {
            safe: '‚úÖ',
            warning: '‚ö†Ô∏è',
            critical: 'üö®',
        }[analysis.summary.status];
        return `
        <section class="summary">
            <h2>Analysis Summary</h2>
            <div class="status status-${statusClass}">
                <span class="status-emoji">${statusEmoji}</span>
                <span class="status-text">Status: ${analysis.summary.status.toUpperCase()}</span>
            </div>
            <div class="primary-concern">
                <strong>Primary Concern:</strong> ${analysis.summary.primaryConcern}
            </div>
            <div class="recommendations">
                <h3>Recommendations</h3>
                <ul>
                    ${analysis.summary.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                </ul>
            </div>
        </section>`;
    }
    /**
     * Generate chart section HTML
     */
    generateChartSection(height) {
        return `
        <section class="charts">
            <h2>Usage Trends</h2>
            <div class="chart-container">
                <canvas id="usageChart" width="800" height="${height}"></canvas>
            </div>
            <div class="chart-info">
                <div class="chart-legend">
                    <div class="legend-item">
                        <span class="legend-color primary"></span>
                        <span>Primary Rate Limit (60 min window)</span>
                    </div>
                    <div class="legend-item">
                        <span class="legend-color secondary"></span>
                        <span>Secondary Rate Limit (7 day window)</span>
                    </div>
                </div>
            </div>
        </section>`;
    }
    /**
     * Generate statistics section HTML
     */
    generateStatisticsSection(analysis) {
        const formatProjection = (projection) => {
            if (!projection?.exhaustionTime)
                return 'Not projected';
            const date = new Date(projection.exhaustionTime);
            /* istanbul ignore next -- Defensive fallback for missing days calculation */
            const days = projection.daysUntilExhaustion?.toFixed(1) || '?';
            return `${date.toLocaleString()} (${days} days)`;
        };
        return `
        <section class="statistics">
            <h2>Detailed Statistics</h2>
            <div class="stats-grid">
                <div class="stat-group">
                    <h3>Primary Rate Limit</h3>
                    <div class="stat-item">
                        <span class="stat-label">Current Usage:</span>
                        <span class="stat-value">${analysis.primary.current.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Average:</span>
                        <span class="stat-value">${analysis.primary.average.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Range:</span>
                        <span class="stat-value">${analysis.primary.minimum.toFixed(1)}% - ${analysis.primary.maximum.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Trend:</span>
                        <span class="stat-value ${analysis.primary.trend.direction}">${analysis.primary.trend.direction}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Daily Change:</span>
                        <span class="stat-value">${analysis.primary.trend.dailyChangePercent.toFixed(2)}%/day</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Confidence:</span>
                        <span class="stat-value">${(analysis.primary.trend.confidence * 100).toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Exhaustion Projection:</span>
                        <span class="stat-value">${formatProjection(analysis.primary.projection)}</span>
                    </div>
                </div>

                <div class="stat-group">
                    <h3>Secondary Rate Limit</h3>
                    <div class="stat-item">
                        <span class="stat-label">Current Usage:</span>
                        <span class="stat-value">${analysis.secondary.current.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Average:</span>
                        <span class="stat-value">${analysis.secondary.average.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Range:</span>
                        <span class="stat-value">${analysis.secondary.minimum.toFixed(1)}% - ${analysis.secondary.maximum.toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Trend:</span>
                        <span class="stat-value ${analysis.secondary.trend.direction}">${analysis.secondary.trend.direction}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Daily Change:</span>
                        <span class="stat-value">${analysis.secondary.trend.dailyChangePercent.toFixed(2)}%/day</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Confidence:</span>
                        <span class="stat-value">${(analysis.secondary.trend.confidence * 100).toFixed(1)}%</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Exhaustion Projection:</span>
                        <span class="stat-value">${formatProjection(analysis.secondary.projection)}</span>
                    </div>
                </div>

                <div class="stat-group">
                    <h3>Data Overview</h3>
                    <div class="stat-item">
                        <span class="stat-label">Time Span:</span>
                        <span class="stat-value">${analysis.timeSpan.hours.toFixed(1)} hours</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Data Points:</span>
                        <span class="stat-value">${analysis.timeSpan.dataPoints}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Start Time:</span>
                        <span class="stat-value">${new Date(analysis.timeSpan.start).toLocaleString()}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">End Time:</span>
                        <span class="stat-value">${new Date(analysis.timeSpan.end).toLocaleString()}</span>
                    </div>
                </div>
            </div>
        </section>`;
    }
    /**
     * Generate raw data section HTML
     */
    generateRawDataSection(dataPoints) {
        const tableRows = dataPoints
            .sort((a, b) => b.timestamp - a.timestamp) // Most recent first
            .map(point => `
        <tr>
            <td>${new Date(point.timestamp).toLocaleString()}</td>
            <td>${(point.rateLimits.primary?.used_percent || 0).toFixed(1)}%</td>
            <td>${(point.rateLimits.secondary?.used_percent || 0).toFixed(1)}%</td>
            <td>${point.queryLatency || 'N/A'}ms</td>
            <td>${point.model}</td>
        </tr>
      `).join('');
        return `
        <section class="raw-data">
            <h2>Raw Data</h2>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Primary Usage</th>
                            <th>Secondary Usage</th>
                            <th>Query Latency</th>
                            <th>Model</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows}
                    </tbody>
                </table>
            </div>
        </section>`;
    }
    /**
     * Get CSS styles for the report
     */
    getStyles(theme) {
        const isDark = theme === 'dark';
        const colors = isDark ? {
            bg: '#1a1a1a',
            surface: '#2d2d2d',
            text: '#e0e0e0',
            textSecondary: '#b0b0b0',
            border: '#404040',
            primary: '#4fc3f7',
            secondary: '#81c784',
            warning: '#ffb74d',
            critical: '#e57373',
            safe: '#81c784',
        } : {
            bg: '#ffffff',
            surface: '#f8f9fa',
            text: '#333333',
            textSecondary: '#666666',
            border: '#e0e0e0',
            primary: '#2196f3',
            secondary: '#4caf50',
            warning: '#ff9800',
            critical: '#f44336',
            safe: '#4caf50',
        };
        return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: ${colors.bg};
            color: ${colors.text};
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background-color: ${colors.surface};
            border-radius: 8px;
            border: 1px solid ${colors.border};
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        h2 {
            font-size: 1.8em;
            margin-bottom: 20px;
            border-bottom: 2px solid ${colors.primary};
            padding-bottom: 10px;
        }

        h3 {
            font-size: 1.3em;
            margin-bottom: 15px;
        }

        .timestamp {
            color: ${colors.textSecondary};
            font-size: 0.9em;
        }

        section {
            margin-bottom: 40px;
            padding: 20px;
            background-color: ${colors.surface};
            border-radius: 8px;
            border: 1px solid ${colors.border};
        }

        .status {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-weight: bold;
            font-size: 1.2em;
        }

        .status-safe { background-color: ${colors.safe}22; border: 2px solid ${colors.safe}; }
        .status-warning { background-color: ${colors.warning}22; border: 2px solid ${colors.warning}; }
        .status-critical { background-color: ${colors.critical}22; border: 2px solid ${colors.critical}; }

        .status-emoji {
            font-size: 1.5em;
        }

        .primary-concern {
            margin-bottom: 20px;
            padding: 15px;
            background-color: ${colors.bg};
            border-radius: 4px;
            border-left: 4px solid ${colors.primary};
        }

        .recommendations ul {
            list-style-position: inside;
            margin-left: 20px;
        }

        .recommendations li {
            margin-bottom: 8px;
        }

        .chart-container {
            margin: 20px 0;
            padding: 20px;
            background-color: ${colors.bg};
            border-radius: 6px;
        }

        .chart-legend {
            display: flex;
            gap: 30px;
            justify-content: center;
            margin-top: 15px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .legend-color {
            width: 20px;
            height: 4px;
            border-radius: 2px;
        }

        .legend-color.primary { background-color: ${colors.primary}; }
        .legend-color.secondary { background-color: ${colors.secondary}; }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }

        .stat-group {
            padding: 20px;
            background-color: ${colors.bg};
            border-radius: 6px;
            border: 1px solid ${colors.border};
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding: 8px 0;
            border-bottom: 1px solid ${colors.border};
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        .stat-label {
            color: ${colors.textSecondary};
            font-weight: 500;
        }

        .stat-value {
            font-weight: bold;
        }

        .stat-value.increasing { color: ${colors.critical}; }
        .stat-value.decreasing { color: ${colors.safe}; }
        .stat-value.stable { color: ${colors.textSecondary}; }

        .table-container {
            overflow-x: auto;
            margin-top: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: ${colors.bg};
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid ${colors.border};
        }

        th {
            background-color: ${colors.surface};
            font-weight: bold;
            color: ${colors.text};
        }

        tr:hover {
            background-color: ${colors.surface};
        }

        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: ${colors.textSecondary};
            border-top: 1px solid ${colors.border};
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            h1 {
                font-size: 2em;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .chart-legend {
                flex-direction: column;
                align-items: center;
                gap: 15px;
            }
        }
    `;
    }
    /**
     * Get JavaScript for Chart.js
     */
    getChartScript(chartData, theme) {
        const isDark = theme === 'dark';
        const colors = isDark ? {
            primary: '#4fc3f7',
            secondary: '#81c784',
            grid: '#404040',
            text: '#e0e0e0',
        } : {
            primary: '#2196f3',
            secondary: '#4caf50',
            grid: '#e0e0e0',
            text: '#333333',
        };
        return `
        const ctx = document.getElementById('usageChart').getContext('2d');

        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ${JSON.stringify(chartData.labels)},
                datasets: [{
                    label: 'Primary Rate Limit (%)',
                    data: ${JSON.stringify(chartData.primary)},
                    borderColor: '${colors.primary}',
                    backgroundColor: '${colors.primary}22',
                    tension: 0.3,
                    fill: false
                }, {
                    label: 'Secondary Rate Limit (%)',
                    data: ${JSON.stringify(chartData.secondary)},
                    borderColor: '${colors.secondary}',
                    backgroundColor: '${colors.secondary}22',
                    tension: 0.3,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        grid: {
                            color: '${colors.grid}'
                        },
                        ticks: {
                            color: '${colors.text}',
                            maxTicksLimit: 10
                        }
                    },
                    y: {
                        beginAtZero: true,
                        max: 100,
                        grid: {
                            color: '${colors.grid}'
                        },
                        ticks: {
                            color: '${colors.text}',
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '${colors.text}'
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ' + context.parsed.y.toFixed(1) + '%';
                            }
                        }
                    }
                }
            }
        });
    `;
    }
}
exports.RateLimitReportGenerator = RateLimitReportGenerator;
