/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class CodexSession {
  get conversationId(): string
  nextEvent(): Promise<string | null>
  submit(submissionJson: string): Promise<void>
  close(): Promise<void>
}

export declare class NativeCodex {
  constructor(options?: NativeCodexOptions | undefined | null)
  createConversation(options?: CreateConversationOptions | undefined | null): Promise<CodexSession>
}

export interface ApplyOutcomeNapi {
  applied: boolean
  status: string
  message: string
  skippedPaths: Array<string>
  conflictPaths: Array<string>
}

export declare function cliVersion(): string

export declare function cloudTasksApply(config: CloudTasksConfig, taskId: string, diffOverride: string | undefined | null, preflight: boolean): Promise<ApplyOutcomeNapi>

export interface CloudTasksConfig {
  baseUrl: string
  bearerToken?: string
  chatgptAccountId?: string
  userAgent?: string
  mock?: boolean
  codexHome?: string
}

export declare function cloudTasksCreate(config: CloudTasksConfig, opts: CreateTaskOptionsNapi): Promise<string>

export declare function cloudTasksGetDiff(config: CloudTasksConfig, taskId: string): Promise<string | null>

export declare function cloudTasksGetMessages(config: CloudTasksConfig, taskId: string): Promise<Array<string>>

export declare function cloudTasksGetText(config: CloudTasksConfig, taskId: string): Promise<TaskTextNapi>

export declare function cloudTasksList(config: CloudTasksConfig, environmentId?: string | undefined | null): Promise<Array<TaskSummaryNapi>>

export declare function cloudTasksListAttempts(config: CloudTasksConfig, taskId: string, turnId: string): Promise<Array<TurnAttemptNapi>>

export declare function cloudTasksListEnvironments(config: CloudTasksConfig): Promise<Array<EnvironmentRowNapi>>

export interface ConfigOverrideEntry {
  key: string
  value: string
}

export interface CreateConversationOptions {
  overrides?: Array<ConfigOverrideEntry>
}

export interface CreateTaskOptionsNapi {
  environmentId: string
  prompt: string
  gitRef: string
  qaMode?: boolean
  bestOfN?: number
}

export interface DiffSummaryNapi {
  filesChanged: number
  linesAdded: number
  linesRemoved: number
}

export interface EnvironmentRowNapi {
  id: string
  label?: string
  isPinned?: boolean
  repoHints?: string
}

export interface NativeCodexOptions {
  codexHome?: string
}

export interface PullRequestNapi {
  number?: number
  url?: string
  state?: string
  merged?: boolean
  title?: string
  body?: string
  baseBranch?: string
  headBranch?: string
  baseSha?: string
  headSha?: string
  mergeCommitSha?: string
}

export interface TaskSummaryNapi {
  id: string
  title: string
  status: string
  updatedAt: string
  createdAt?: string
  hasGeneratedTitle?: boolean
  environmentId?: string
  environmentLabel?: string
  summary: DiffSummaryNapi
  isReview: boolean
  attemptTotal?: number
  archived?: boolean
  hasUnreadTurn?: boolean
  branchName?: string
  turnId?: string
  turnStatus?: string
  siblingTurnIds?: Array<string>
  intent?: string
  initialIntent?: string
  fixTaskId?: string
  pullRequests?: Array<PullRequestNapi>
}

export interface TaskTextNapi {
  prompt?: string
  messages: Array<string>
  turnId?: string
  siblingTurnIds: Array<string>
  attemptPlacement?: number
  attemptStatus?: string
}

export interface TurnAttemptNapi {
  turnId: string
  attemptPlacement?: number
  createdAt?: string
  status: string
  diff?: string
  messages: Array<string>
}

export declare function version(): string
